
Rain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000754  08000754  00001754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000778  08000778  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000778  08000778  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000778  08000778  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000778  08000778  00001778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800077c  0800077c  0000177c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000780  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001273  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000647  00000000  00000000  000032a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  000038e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e0  00000000  00000000  00003a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018538  00000000  00000000  00003b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001821  00000000  00000000  0001c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087f6a  00000000  00000000  0001d871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a57db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000358  00000000  00000000  000a5820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000a5b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000049  00000000  00000000  000a5b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800073c 	.word	0x0800073c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800073c 	.word	0x0800073c

080001c8 <Rain_Digital_Init>:
#include "stm32f4xx.h"
#include "Rain.h"

void Rain_Digital_Init(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;    // Enable GPIOA clock
 80001cc:	4b0a      	ldr	r3, [pc, #40]	@ (80001f8 <Rain_Digital_Init+0x30>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a09      	ldr	r2, [pc, #36]	@ (80001f8 <Rain_Digital_Init+0x30>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA1 as input
    GPIOA->MODER &= ~(3 << (1 * 2));
 80001d8:	4b08      	ldr	r3, [pc, #32]	@ (80001fc <Rain_Digital_Init+0x34>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <Rain_Digital_Init+0x34>)
 80001de:	f023 030c 	bic.w	r3, r3, #12
 80001e2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (1 * 2));
 80001e4:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <Rain_Digital_Init+0x34>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <Rain_Digital_Init+0x34>)
 80001ea:	f023 030c 	bic.w	r3, r3, #12
 80001ee:	60d3      	str	r3, [r2, #12]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40023800 	.word	0x40023800
 80001fc:	40020000 	.word	0x40020000

08000200 <Is_Raining>:

uint8_t Is_Raining(void) {
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
    return (GPIOA->IDR & GPIO_IDR_ID1) ? 0 : 1;
 8000204:	4b06      	ldr	r3, [pc, #24]	@ (8000220 <Is_Raining+0x20>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	f003 0302 	and.w	r3, r3, #2
 800020c:	2b00      	cmp	r3, #0
 800020e:	bf0c      	ite	eq
 8000210:	2301      	moveq	r3, #1
 8000212:	2300      	movne	r3, #0
 8000214:	b2db      	uxtb	r3, r3
}
 8000216:	4618      	mov	r0, r3
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40020000 	.word	0x40020000

08000224 <I2CInit>:
 *      Author: admin
 */

#include "i2c.h"

void I2CInit(void) {
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	// gpio config
	// enable gpio b clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000228:	4b29      	ldr	r3, [pc, #164]	@ (80002d0 <I2CInit+0xac>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022c:	4a28      	ldr	r2, [pc, #160]	@ (80002d0 <I2CInit+0xac>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	@ 0x30
	// set mode as alt fn (10)
	GPIOB->MODER |= BV(2*6+1) | BV(2*7+1);
 8000234:	4b27      	ldr	r3, [pc, #156]	@ (80002d4 <I2CInit+0xb0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a26      	ldr	r2, [pc, #152]	@ (80002d4 <I2CInit+0xb0>)
 800023a:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800023e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(2*6) | BV(2*7));
 8000240:	4b24      	ldr	r3, [pc, #144]	@ (80002d4 <I2CInit+0xb0>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a23      	ldr	r2, [pc, #140]	@ (80002d4 <I2CInit+0xb0>)
 8000246:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 800024a:	6013      	str	r3, [r2, #0]
	// set alt fn to AF4 (i2c)
	GPIOB->AFR[0] = (4 << (4*6)) | (4 << (4*7));
 800024c:	4b21      	ldr	r3, [pc, #132]	@ (80002d4 <I2CInit+0xb0>)
 800024e:	f04f 4288 	mov.w	r2, #1140850688	@ 0x44000000
 8000252:	621a      	str	r2, [r3, #32]
	// no pull up & pull down regr
	GPIOB->PUPDR &= ~(BV(2*6+1) | BV(2*7+1) | BV(2*6) | BV(2*7));
 8000254:	4b1f      	ldr	r3, [pc, #124]	@ (80002d4 <I2CInit+0xb0>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a1e      	ldr	r2, [pc, #120]	@ (80002d4 <I2CInit+0xb0>)
 800025a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800025e:	60d3      	str	r3, [r2, #12]
	// Enable open-drain for PB6 & PB7
	GPIOB->OTYPER |= BV(6) | BV(7);
 8000260:	4b1c      	ldr	r3, [pc, #112]	@ (80002d4 <I2CInit+0xb0>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a1b      	ldr	r2, [pc, #108]	@ (80002d4 <I2CInit+0xb0>)
 8000266:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800026a:	6053      	str	r3, [r2, #4]

	// i2c config
	// enable i2c peri clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800026c:	4b18      	ldr	r3, [pc, #96]	@ (80002d0 <I2CInit+0xac>)
 800026e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000270:	4a17      	ldr	r2, [pc, #92]	@ (80002d0 <I2CInit+0xac>)
 8000272:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000276:	6413      	str	r3, [r2, #64]	@ 0x40
	// i2c sw reset
	I2C1->CR1 |= I2C_CR1_SWRST;
 8000278:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <I2CInit+0xb4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a16      	ldr	r2, [pc, #88]	@ (80002d8 <I2CInit+0xb4>)
 800027e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000282:	6013      	str	r3, [r2, #0]
	I2C1->CR1 = 0;				// clear all CR1 bits
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <I2CInit+0xb4>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
	// peri clock -- CR2 = 16MHz
	I2C1->CR2 |= 16 << I2C_CR2_FREQ_Pos;
 800028a:	4b13      	ldr	r3, [pc, #76]	@ (80002d8 <I2CInit+0xb4>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	4a12      	ldr	r2, [pc, #72]	@ (80002d8 <I2CInit+0xb4>)
 8000290:	f043 0310 	orr.w	r3, r3, #16
 8000294:	6053      	str	r3, [r2, #4]
	// set i2c clock -- CCR = 80 (Std mode=100KHz)
	I2C1->CCR = 80;
 8000296:	4b10      	ldr	r3, [pc, #64]	@ (80002d8 <I2CInit+0xb4>)
 8000298:	2250      	movs	r2, #80	@ 0x50
 800029a:	61da      	str	r2, [r3, #28]
	I2C1->CCR &= ~I2C_CCR_FS;	// standard mode (default)
 800029c:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <I2CInit+0xb4>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	4a0d      	ldr	r2, [pc, #52]	@ (80002d8 <I2CInit+0xb4>)
 80002a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002a6:	61d3      	str	r3, [r2, #28]
	// set Trise -- TRISE = 17
	I2C1->TRISE = 17;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <I2CInit+0xb4>)
 80002aa:	2211      	movs	r2, #17
 80002ac:	621a      	str	r2, [r3, #32]
	// enable ack
	I2C1->CR1 |= I2C_CR1_ACK;
 80002ae:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <I2CInit+0xb4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a09      	ldr	r2, [pc, #36]	@ (80002d8 <I2CInit+0xb4>)
 80002b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002b8:	6013      	str	r3, [r2, #0]
	// enable i2c peri
	I2C1->CR1 |= I2C_CR1_PE;
 80002ba:	4b07      	ldr	r3, [pc, #28]	@ (80002d8 <I2CInit+0xb4>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a06      	ldr	r2, [pc, #24]	@ (80002d8 <I2CInit+0xb4>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6013      	str	r3, [r2, #0]
}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020400 	.word	0x40020400
 80002d8:	40005400 	.word	0x40005400

080002dc <I2CStart>:

void I2CStart(void) {
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	// send start bit
	I2C1->CR1 |= I2C_CR1_START;
 80002e0:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <I2CStart+0x28>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a07      	ldr	r2, [pc, #28]	@ (8000304 <I2CStart+0x28>)
 80002e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ea:	6013      	str	r3, [r2, #0]
	// wait for start bit sent on bus
	while(!(I2C1->SR1 & I2C_SR1_SB));	// while((I2C1->SR1 & I2C_SR1_SB) == 0);
 80002ec:	bf00      	nop
 80002ee:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <I2CStart+0x28>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <I2CStart+0x12>
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40005400 	.word	0x40005400

08000308 <I2CStop>:

void I2CRepeatStart(void) {
	I2CStart();
}

void I2CStop(void) {
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	// send stop bit
	I2C1->CR1 |= I2C_CR1_STOP;
 800030c:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <I2CStop+0x28>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a07      	ldr	r2, [pc, #28]	@ (8000330 <I2CStop+0x28>)
 8000312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000316:	6013      	str	r3, [r2, #0]
	// wait for stop bit sent on bus
	while(I2C1->SR2 & I2C_SR2_BUSY);		// while((I2C1->SR2 & I2C_SR2_BUSY) != 0);
 8000318:	bf00      	nop
 800031a:	4b05      	ldr	r3, [pc, #20]	@ (8000330 <I2CStop+0x28>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0302 	and.w	r3, r3, #2
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1f9      	bne.n	800031a <I2CStop+0x12>
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40005400 	.word	0x40005400

08000334 <I2CSendSlaveAddr>:

void I2CSendSlaveAddr(uint8_t addr) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	// write slave addr in DR
	I2C1->DR = addr;
 800033e:	4a09      	ldr	r2, [pc, #36]	@ (8000364 <I2CSendSlaveAddr+0x30>)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	6113      	str	r3, [r2, #16]
	// wait until slave addr is sent
	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000344:	bf00      	nop
 8000346:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <I2CSendSlaveAddr+0x30>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f003 0302 	and.w	r3, r3, #2
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <I2CSendSlaveAddr+0x12>
	// read status regrs to clear acks
	(void)I2C1->SR1;
 8000352:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <I2CSendSlaveAddr+0x30>)
 8000354:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 8000356:	4b03      	ldr	r3, [pc, #12]	@ (8000364 <I2CSendSlaveAddr+0x30>)
 8000358:	699b      	ldr	r3, [r3, #24]
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40005400 	.word	0x40005400

08000368 <I2CSendData>:

void I2CSendData(uint8_t data) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	// wait until data is sent
	while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000372:	bf00      	nop
 8000374:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <I2CSendData+0x38>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <I2CSendData+0xc>
	// write data in DR
	I2C1->DR = data;
 8000380:	4a07      	ldr	r2, [pc, #28]	@ (80003a0 <I2CSendData+0x38>)
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	6113      	str	r3, [r2, #16]
	// poll for BTF is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000386:	bf00      	nop
 8000388:	4b05      	ldr	r3, [pc, #20]	@ (80003a0 <I2CSendData+0x38>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0f9      	beq.n	8000388 <I2CSendData+0x20>
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40005400 	.word	0x40005400

080003a4 <I2CWrite>:
	while(!(I2C1->SR1 & I2C_SR1_RXNE));
	// collect received data and return it
	return I2C1->DR;
}

void I2CWrite(uint8_t addr, uint8_t data) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	460a      	mov	r2, r1
 80003ae:	71fb      	strb	r3, [r7, #7]
 80003b0:	4613      	mov	r3, r2
 80003b2:	71bb      	strb	r3, [r7, #6]
	I2CStart();
 80003b4:	f7ff ff92 	bl	80002dc <I2CStart>
	I2CSendSlaveAddr(addr);
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ffba 	bl	8000334 <I2CSendSlaveAddr>
	I2CSendData(data);
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffd0 	bl	8000368 <I2CSendData>
	I2CStop();
 80003c8:	f7ff ff9e 	bl	8000308 <I2CStop>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80003dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <DelayMs+0x44>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80003e2:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <DelayMs+0x48>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000420 <DelayMs+0x4c>)
 80003e8:	fba2 2303 	umull	r2, r3, r2, r3
 80003ec:	099b      	lsrs	r3, r3, #6
 80003ee:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	68ba      	ldr	r2, [r7, #8]
 80003f4:	fb02 f303 	mul.w	r3, r2, r3
 80003f8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003fa:	bf00      	nop
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <DelayMs+0x44>)
 80003fe:	685a      	ldr	r2, [r3, #4]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	1ad2      	subs	r2, r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	429a      	cmp	r2, r3
 8000408:	d3f8      	bcc.n	80003fc <DelayMs+0x28>
}
 800040a:	bf00      	nop
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e0001000 	.word	0xe0001000
 800041c:	20000000 	.word	0x20000000
 8000420:	10624dd3 	.word	0x10624dd3

08000424 <LcdInit>:
 *      Author: admin
 */

#include "lcd.h"

void LcdInit(void) {
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	// i2c initialization
	I2CInit();
 8000428:	f7ff fefc 	bl	8000224 <I2CInit>
	// lcd initialization
	DelayMs(20);
 800042c:	2014      	movs	r0, #20
 800042e:	f7ff ffd1 	bl	80003d4 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 8000432:	2103      	movs	r1, #3
 8000434:	2000      	movs	r0, #0
 8000436:	f000 f82e 	bl	8000496 <LcdWriteNibble>
	DelayMs(5);
 800043a:	2005      	movs	r0, #5
 800043c:	f7ff ffca 	bl	80003d4 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 8000440:	2103      	movs	r1, #3
 8000442:	2000      	movs	r0, #0
 8000444:	f000 f827 	bl	8000496 <LcdWriteNibble>
	DelayMs(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff ffc3 	bl	80003d4 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 800044e:	2103      	movs	r1, #3
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f820 	bl	8000496 <LcdWriteNibble>
	DelayMs(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff ffbc 	bl	80003d4 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x02);
 800045c:	2102      	movs	r1, #2
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f819 	bl	8000496 <LcdWriteNibble>
	DelayMs(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f7ff ffb5 	bl	80003d4 <DelayMs>

	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 800046a:	2128      	movs	r1, #40	@ 0x28
 800046c:	2000      	movs	r0, #0
 800046e:	f000 f84a 	bl	8000506 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 8000472:	2108      	movs	r1, #8
 8000474:	2000      	movs	r0, #0
 8000476:	f000 f846 	bl	8000506 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 800047a:	2101      	movs	r1, #1
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f842 	bl	8000506 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 8000482:	2106      	movs	r1, #6
 8000484:	2000      	movs	r0, #0
 8000486:	f000 f83e 	bl	8000506 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 800048a:	210c      	movs	r1, #12
 800048c:	2000      	movs	r0, #0
 800048e:	f000 f83a 	bl	8000506 <LcdWriteByte>
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}

08000496 <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t data) {
 8000496:	b580      	push	{r7, lr}
 8000498:	b084      	sub	sp, #16
 800049a:	af00      	add	r7, sp, #0
 800049c:	4603      	mov	r3, r0
 800049e:	460a      	mov	r2, r1
 80004a0:	71fb      	strb	r3, [r7, #7]
 80004a2:	4613      	mov	r3, r2
 80004a4:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = rs == LCD_DATA ? BV(LCD_RS_Pos) : 0;
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	bf0c      	ite	eq
 80004ac:	2301      	moveq	r3, #1
 80004ae:	2300      	movne	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	73fb      	strb	r3, [r7, #15]
	uint8_t val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos) ;
 80004b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004b8:	011b      	lsls	r3, r3, #4
 80004ba:	b25a      	sxtb	r2, r3
 80004bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	b25b      	sxtb	r3, r3
 80004c4:	f043 030c 	orr.w	r3, r3, #12
 80004c8:	b25b      	sxtb	r3, r3
 80004ca:	73bb      	strb	r3, [r7, #14]
	I2CWrite(LCD_SLAVE_ADDR_W, val);
 80004cc:	7bbb      	ldrb	r3, [r7, #14]
 80004ce:	4619      	mov	r1, r3
 80004d0:	204e      	movs	r0, #78	@ 0x4e
 80004d2:	f7ff ff67 	bl	80003a4 <I2CWrite>
	DelayMs(1);
 80004d6:	2001      	movs	r0, #1
 80004d8:	f7ff ff7c 	bl	80003d4 <DelayMs>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 80004dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	b25a      	sxtb	r2, r3
 80004e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	f043 0308 	orr.w	r3, r3, #8
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	73bb      	strb	r3, [r7, #14]
	I2CWrite(LCD_SLAVE_ADDR_W, val);
 80004f4:	7bbb      	ldrb	r3, [r7, #14]
 80004f6:	4619      	mov	r1, r3
 80004f8:	204e      	movs	r0, #78	@ 0x4e
 80004fa:	f7ff ff53 	bl	80003a4 <I2CWrite>
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <LcdWriteByte>:

void LcdWriteByte(uint8_t rs, uint8_t data) {
 8000506:	b580      	push	{r7, lr}
 8000508:	b084      	sub	sp, #16
 800050a:	af00      	add	r7, sp, #0
 800050c:	4603      	mov	r3, r0
 800050e:	460a      	mov	r2, r1
 8000510:	71fb      	strb	r3, [r7, #7]
 8000512:	4613      	mov	r3, r2
 8000514:	71bb      	strb	r3, [r7, #6]
	// divide data into two nibbles
	uint8_t high = data >> 4, low = data & 0x0F;
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	091b      	lsrs	r3, r3, #4
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	f003 030f 	and.w	r3, r3, #15
 8000522:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 8000524:	7bfa      	ldrb	r2, [r7, #15]
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4611      	mov	r1, r2
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ffb3 	bl	8000496 <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 8000530:	7bba      	ldrb	r2, [r7, #14]
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffad 	bl	8000496 <LcdWriteNibble>
	// wait for busy flag -- optional for low speed uc
	DelayMs(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff49 	bl	80003d4 <DelayMs>
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <LcdPuts>:

void LcdPuts(uint8_t line, char *str) {
 800054a:	b580      	push	{r7, lr}
 800054c:	b084      	sub	sp, #16
 800054e:	af00      	add	r7, sp, #0
 8000550:	4603      	mov	r3, r0
 8000552:	6039      	str	r1, [r7, #0]
 8000554:	71fb      	strb	r3, [r7, #7]
	// set line start addr
	LcdWriteByte(LCD_CMD, line);
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4619      	mov	r1, r3
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ffd3 	bl	8000506 <LcdWriteByte>
	// write chars one by one
	for(int i=0; str[i] != '\0'; i++)
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e00a      	b.n	800057c <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	4413      	add	r3, r2
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	4619      	mov	r1, r3
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff ffc8 	bl	8000506 <LcdWriteByte>
	for(int i=0; str[i] != '\0'; i++)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	3301      	adds	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	4413      	add	r3, r2
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1ee      	bne.n	8000566 <LcdPuts+0x1c>
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800059c:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <DelayMs+0x44>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <DelayMs+0x48>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	@ (80005e0 <DelayMs+0x4c>)
 80005a8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ac:	099b      	lsrs	r3, r3, #6
 80005ae:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	fb02 f303 	mul.w	r3, r2, r3
 80005b8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80005ba:	bf00      	nop
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <DelayMs+0x44>)
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	1ad2      	subs	r2, r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d3f8      	bcc.n	80005bc <DelayMs+0x28>
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e0001000 	.word	0xe0001000
 80005dc:	20000000 	.word	0x20000000
 80005e0:	10624dd3 	.word	0x10624dd3

080005e4 <main>:
#include <stdint.h>
#include "lcd.h"
#include "Rain.h"

int main(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
    DelayMs(20);
 80005ea:	2014      	movs	r0, #20
 80005ec:	f7ff ffd2 	bl	8000594 <DelayMs>
    LcdInit();
 80005f0:	f7ff ff18 	bl	8000424 <LcdInit>
    Rain_Digital_Init();  //PA1 as input
 80005f4:	f7ff fde8 	bl	80001c8 <Rain_Digital_Init>

    char* status;

    while (1) {
        if (Is_Raining()) {
 80005f8:	f7ff fe02 	bl	8000200 <Is_Raining>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <main+0x24>
            status = "Raining...";
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <main+0x44>)
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	e001      	b.n	800060c <main+0x28>
        } else {
            status = "No Rain";
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <main+0x48>)
 800060a:	607b      	str	r3, [r7, #4]
        }

        LcdPuts(LCD_LINE1, "Rain Detection");
 800060c:	4908      	ldr	r1, [pc, #32]	@ (8000630 <main+0x4c>)
 800060e:	2080      	movs	r0, #128	@ 0x80
 8000610:	f7ff ff9b 	bl	800054a <LcdPuts>
        LcdPuts(LCD_LINE2, status);
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	20c0      	movs	r0, #192	@ 0xc0
 8000618:	f7ff ff97 	bl	800054a <LcdPuts>

        DelayMs(1000);  // Update every 1 sec
 800061c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000620:	f7ff ffb8 	bl	8000594 <DelayMs>
        if (Is_Raining()) {
 8000624:	e7e8      	b.n	80005f8 <main+0x14>
 8000626:	bf00      	nop
 8000628:	08000754 	.word	0x08000754
 800062c:	08000760 	.word	0x08000760
 8000630:	08000768 	.word	0x08000768

08000634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000638:	f000 f802 	bl	8000640 <DWT_Init>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <DWT_Init+0x58>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <DWT_Init+0x58>)
 800064a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800064e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <DWT_Init+0x58>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a10      	ldr	r2, [pc, #64]	@ (8000698 <DWT_Init+0x58>)
 8000656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800065a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <DWT_Init+0x5c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a0e      	ldr	r2, [pc, #56]	@ (800069c <DWT_Init+0x5c>)
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <DWT_Init+0x5c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0b      	ldr	r2, [pc, #44]	@ (800069c <DWT_Init+0x5c>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <DWT_Init+0x5c>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800067a:	bf00      	nop
    __ASM volatile ("NOP");
 800067c:	bf00      	nop
    __ASM volatile ("NOP");
 800067e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <DWT_Init+0x5c>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	2b00      	cmp	r3, #0
 8000686:	bf0c      	ite	eq
 8000688:	2301      	moveq	r3, #1
 800068a:	2300      	movne	r3, #0
 800068c:	b2db      	uxtb	r3, r3
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000edf0 	.word	0xe000edf0
 800069c:	e0001000 	.word	0xe0001000

080006a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a0:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a4:	f7ff ffc6 	bl	8000634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	@ (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	@ (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ce:	f000 f811 	bl	80006f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff ff87 	bl	80005e4 <main>

080006d6 <LoopForever>:

LoopForever:
  b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   r0, =_estack
 80006d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006e4:	08000780 	.word	0x08000780
  ldr r2, =_sbss
 80006e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006ec:	20000020 	.word	0x20000020

080006f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC_IRQHandler>
	...

080006f4 <__libc_init_array>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	4d0d      	ldr	r5, [pc, #52]	@ (800072c <__libc_init_array+0x38>)
 80006f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000730 <__libc_init_array+0x3c>)
 80006fa:	1b64      	subs	r4, r4, r5
 80006fc:	10a4      	asrs	r4, r4, #2
 80006fe:	2600      	movs	r6, #0
 8000700:	42a6      	cmp	r6, r4
 8000702:	d109      	bne.n	8000718 <__libc_init_array+0x24>
 8000704:	4d0b      	ldr	r5, [pc, #44]	@ (8000734 <__libc_init_array+0x40>)
 8000706:	4c0c      	ldr	r4, [pc, #48]	@ (8000738 <__libc_init_array+0x44>)
 8000708:	f000 f818 	bl	800073c <_init>
 800070c:	1b64      	subs	r4, r4, r5
 800070e:	10a4      	asrs	r4, r4, #2
 8000710:	2600      	movs	r6, #0
 8000712:	42a6      	cmp	r6, r4
 8000714:	d105      	bne.n	8000722 <__libc_init_array+0x2e>
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f855 3b04 	ldr.w	r3, [r5], #4
 800071c:	4798      	blx	r3
 800071e:	3601      	adds	r6, #1
 8000720:	e7ee      	b.n	8000700 <__libc_init_array+0xc>
 8000722:	f855 3b04 	ldr.w	r3, [r5], #4
 8000726:	4798      	blx	r3
 8000728:	3601      	adds	r6, #1
 800072a:	e7f2      	b.n	8000712 <__libc_init_array+0x1e>
 800072c:	08000778 	.word	0x08000778
 8000730:	08000778 	.word	0x08000778
 8000734:	08000778 	.word	0x08000778
 8000738:	0800077c 	.word	0x0800077c

0800073c <_init>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	bf00      	nop
 8000740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000742:	bc08      	pop	{r3}
 8000744:	469e      	mov	lr, r3
 8000746:	4770      	bx	lr

08000748 <_fini>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	bf00      	nop
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr
